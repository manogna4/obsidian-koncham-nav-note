/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const plugin_name = 'koncham-nav-note';
class MyPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin [' + plugin_name + ']');
            this.addCommand({
                id: 'goto-sibling-prev',
                name: 'goto sibling: previous',
                callback: () => this.gotoSibling(-1),
            });
            this.addCommand({
                id: 'goto-sibling-next',
                name: 'goto sibling: next',
                callback: () => this.gotoSibling(1),
            });
            this.addCommand({
                id: 'show-tokens',
                name: 'show tokens',
                callback: () => this.showTokens(),
            });
            this.addCommand({
                id: 'goto-block-prev',
                name: 'goto block: prev',
                callback: () => this.gotoBlockPrev(),
                // callback: () => this.gotoBlock(-1),
            });
            this.addCommand({
                id: 'goto-block-next',
                name: 'goto block: next',
                callback: () => this.gotoBlock(1),
            });
        });
    }
    showTokens() {
        const view = this.app.workspace.activeLeaf.view;
        if (view instanceof obsidian.MarkdownView) {
            const cm = view.sourceMode.cmEditor;
            let cursorHead = cm.getCursor();
            let var_token_base = cm.getTokenTypeAt(cursorHead);
            new obsidian.Notice(var_token_base);
            console.log(var_token_base);
        }
    }
    // gotoBlock is configured only for [n_item = +1 or -1]
    // it may be extended later
    gotoBlock(n_item) {
        const view = this.app.workspace.activeLeaf.view;
        if (view instanceof obsidian.MarkdownView) {
            const cm = view.sourceMode.cmEditor;
            let cursorHead = cm.getCursor();
            let line_base = cursorHead.line;
            let line_limit = this.getLineLimit(n_item);
            let result = false;
            // checking
            let is_blank;
            if (cm.getTokenTypeAt(cursorHead) === undefined) {
                is_blank = true;
            }
            else {
                is_blank = false;
            }
            if (n_item > 0) {
                cursorHead.line += 1;
            }
            else {
                cursorHead.line -= 1;
            }
            console.log('start');
            while (!result && this.gotoCheckLimit(cursorHead.line, n_item, line_limit)) {
                let token = cm.getTokenTypeAt(cursorHead);
                if (is_blank == true && token !== undefined) {
                    result = true;
                }
                else if (cursorHead.line == line_limit + 1) {
                    result = true;
                }
                else if (token === undefined) {
                    is_blank = true;
                    cursorHead.line += n_item;
                }
                else {
                    is_blank = false;
                    cursorHead.line += n_item;
                }
                // console.log(cursorHead.line, line_limit)
            }
            if (result) {
                cm.setCursor(cursorHead);
            }
            else {
                new obsidian.Notice(plugin_name + ': not found');
                cursorHead.line = line_base;
            }
        }
    }
    gotoBlockPrev() {
        const view = this.app.workspace.activeLeaf.view;
        if (view instanceof obsidian.MarkdownView) {
            const cm = view.sourceMode.cmEditor;
            let cursorHead = cm.getCursor();
            let line_base = cursorHead.line;
            let line_limit = cm.firstLine();
            let result = false;
            cursorHead.line -= 1;
            while (!result && cursorHead.line >= line_limit) {
                let token1 = cm.getTokenTypeAt(cursorHead);
                cursorHead.line -= 1;
                let token2 = cm.getTokenTypeAt(cursorHead);
                console.log(token1, token2);
                if (token1 !== undefined && token2 === undefined) {
                    result = true;
                }
                else if (cursorHead.line < line_limit) {
                    result = true;
                }
            }
            if (result) {
                cursorHead.line += 1;
                cm.setCursor(cursorHead);
            }
            else {
                new obsidian.Notice(plugin_name + ': not found');
                cursorHead.line = line_base;
            }
        }
    }
    // gotoSibling is configured only for [n_item = +1 or -1]
    // it may be extended later
    gotoSibling(n_item) {
        const view = this.app.workspace.activeLeaf.view;
        if (view instanceof obsidian.MarkdownView) {
            const cm = view.sourceMode.cmEditor;
            let line_limit;
            if (n_item > 0) {
                line_limit = cm.lastLine();
            }
            else {
                line_limit = cm.firstLine();
            }
            let cursorHead = cm.getCursor();
            let var_token_base = cm.getTokenTypeAt(cursorHead);
            let line_base = cursorHead.line;
            let var_token;
            while (var_token != var_token_base
                && this.gotoCheckLimit(cursorHead.line, n_item, line_limit)) {
                cursorHead.line += n_item;
                var_token = cm.getTokenTypeAt(cursorHead);
            }
            if (var_token == var_token_base) {
                cm.setCursor(cursorHead);
            }
            else {
                new obsidian.Notice(plugin_name + ': not found');
                cursorHead.line = line_base;
            }
        }
    }
    // gotoCheckLimit is configured only for [n_item = +1 or -1]
    // it may be extended later
    gotoCheckLimit(current_line, n_item, line_limit) {
        if (n_item > 0 && current_line < line_limit) {
            return true;
        }
        else if (n_item < 0 && current_line > line_limit) {
            return true;
        }
        else {
            return false;
        }
    }
    // gotoCheckLimit is configured only for [n_item = +1 or -1]
    // it may be extended later
    getLineLimit(n_item) {
        const view = this.app.workspace.activeLeaf.view;
        let line_limit;
        if (view instanceof obsidian.MarkdownView) {
            const cm = view.sourceMode.cmEditor;
            if (n_item > 0) {
                line_limit = cm.lastLine();
            }
            else {
                line_limit = cm.firstLine();
            }
        }
        return line_limit;
    }
    onunload() {
        console.log('unloading plugin [' + plugin_name + ']');
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiaW1wb3J0IHsgQXBwLCBNb2RhbCwgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmNvbnN0IHBsdWdpbl9uYW1lID0gJ2tvbmNoYW0tbmF2LW5vdGUnXHJcblxyXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XHJcblx0bXlTZXR0aW5nOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XHJcblx0bXlTZXR0aW5nOiAnZGVmYXVsdCdcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzO1xyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblx0XHRjb25zb2xlLmxvZygnbG9hZGluZyBwbHVnaW4gWycgKyBwbHVnaW5fbmFtZSArICddJyk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdnb3RvLXNpYmxpbmctcHJldicsXHJcblx0XHRcdG5hbWU6ICdnb3RvIHNpYmxpbmc6IHByZXZpb3VzJyxcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHRoaXMuZ290b1NpYmxpbmcoLTEpLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdnb3RvLXNpYmxpbmctbmV4dCcsXHJcblx0XHRcdG5hbWU6ICdnb3RvIHNpYmxpbmc6IG5leHQnLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4gdGhpcy5nb3RvU2libGluZygxKSxcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnc2hvdy10b2tlbnMnLFxyXG5cdFx0XHRuYW1lOiAnc2hvdyB0b2tlbnMnLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4gdGhpcy5zaG93VG9rZW5zKCksXHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ2dvdG8tYmxvY2stcHJldicsXHJcblx0XHRcdG5hbWU6ICdnb3RvIGJsb2NrOiBwcmV2JyxcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHRoaXMuZ290b0Jsb2NrUHJldigpLFxyXG5cdFx0XHQvLyBjYWxsYmFjazogKCkgPT4gdGhpcy5nb3RvQmxvY2soLTEpLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdnb3RvLWJsb2NrLW5leHQnLFxyXG5cdFx0XHRuYW1lOiAnZ290byBibG9jazogbmV4dCcsXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB0aGlzLmdvdG9CbG9jaygxKSxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0c2hvd1Rva2Vucygpe1xyXG5cdFx0Y29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLnZpZXc7XHJcblx0XHRpZiAodmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xyXG5cdFx0XHRjb25zdCBjbSA9IHZpZXcuc291cmNlTW9kZS5jbUVkaXRvcjtcclxuXHRcdFx0bGV0IGN1cnNvckhlYWQgPSBjbS5nZXRDdXJzb3IoKTtcclxuXHRcdFx0bGV0IHZhcl90b2tlbl9iYXNlID0gY20uZ2V0VG9rZW5UeXBlQXQoY3Vyc29ySGVhZCk7XHJcblx0XHRcdG5ldyBOb3RpY2UodmFyX3Rva2VuX2Jhc2UpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyh2YXJfdG9rZW5fYmFzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblx0Ly8gZ290b0Jsb2NrIGlzIGNvbmZpZ3VyZWQgb25seSBmb3IgW25faXRlbSA9ICsxIG9yIC0xXVxyXG5cdC8vIGl0IG1heSBiZSBleHRlbmRlZCBsYXRlclxyXG5cdGdvdG9CbG9jayhuX2l0ZW06bnVtYmVyKSB7XHJcblx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYudmlldztcclxuXHRcdGlmICh2aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSB7XHJcblx0XHRcdGNvbnN0IGNtID0gdmlldy5zb3VyY2VNb2RlLmNtRWRpdG9yO1xyXG5cdFx0XHRsZXQgY3Vyc29ySGVhZCA9IGNtLmdldEN1cnNvcigpO1xyXG5cdFx0XHRsZXQgbGluZV9iYXNlID0gY3Vyc29ySGVhZC5saW5lO1xyXG5cdFx0XHRsZXQgbGluZV9saW1pdCA9IHRoaXMuZ2V0TGluZUxpbWl0KG5faXRlbSk7XHJcblx0XHRcdGxldCByZXN1bHQgPSBmYWxzZTtcclxuXHRcdFx0Ly8gY2hlY2tpbmdcclxuXHRcdFx0bGV0IGlzX2JsYW5rO1xyXG5cdFx0XHRpZiAoY20uZ2V0VG9rZW5UeXBlQXQoY3Vyc29ySGVhZCkgPT09IHVuZGVmaW5lZCkge2lzX2JsYW5rID0gdHJ1ZX0gZWxzZSB7aXNfYmxhbmsgPSBmYWxzZX1cclxuXHRcdFx0aWYgKG5faXRlbT4wKXtjdXJzb3JIZWFkLmxpbmUrPTE7fWVsc2V7Y3Vyc29ySGVhZC5saW5lLT0xO31cclxuXHRcdFx0Y29uc29sZS5sb2coJ3N0YXJ0JylcclxuXHRcdFx0d2hpbGUgKCFyZXN1bHQgJiYgdGhpcy5nb3RvQ2hlY2tMaW1pdChjdXJzb3JIZWFkLmxpbmUsIG5faXRlbSwgbGluZV9saW1pdCkpIHtcclxuXHRcdFx0XHRsZXQgdG9rZW4gPSBjbS5nZXRUb2tlblR5cGVBdChjdXJzb3JIZWFkKVxyXG5cdFx0XHRcdGlmIChpc19ibGFuayA9PSB0cnVlICYmIHRva2VuICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdHJlc3VsdCA9IHRydWU7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChjdXJzb3JIZWFkLmxpbmUgPT0gbGluZV9saW1pdCsxKSB7XHJcblx0XHRcdFx0XHRyZXN1bHQgPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAodG9rZW4gPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0XHRpc19ibGFuayA9IHRydWU7XHJcblx0XHRcdFx0XHRjdXJzb3JIZWFkLmxpbmUgKz0gbl9pdGVtO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpc19ibGFuayA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0Y3Vyc29ySGVhZC5saW5lICs9IG5faXRlbTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coY3Vyc29ySGVhZC5saW5lLCBsaW5lX2xpbWl0KVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChyZXN1bHQpe1xyXG5cdFx0XHRcdGNtLnNldEN1cnNvcihjdXJzb3JIZWFkKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRuZXcgTm90aWNlKHBsdWdpbl9uYW1lICsgJzogbm90IGZvdW5kJyk7XHJcblx0XHRcdFx0Y3Vyc29ySGVhZC5saW5lID0gbGluZV9iYXNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnb3RvQmxvY2tQcmV2KCl7XHJcblx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYudmlldztcclxuXHRcdGlmICh2aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSB7XHJcblx0XHRcdGNvbnN0IGNtID0gdmlldy5zb3VyY2VNb2RlLmNtRWRpdG9yO1xyXG5cdFx0XHRsZXQgY3Vyc29ySGVhZCA9IGNtLmdldEN1cnNvcigpO1xyXG5cdFx0XHRsZXQgbGluZV9iYXNlID0gY3Vyc29ySGVhZC5saW5lO1xyXG5cdFx0XHRsZXQgbGluZV9saW1pdCA9IGNtLmZpcnN0TGluZSgpO1xyXG5cdFx0XHRsZXQgcmVzdWx0ID0gZmFsc2U7XHJcblx0XHRcdGN1cnNvckhlYWQubGluZSAtPSAxXHJcblx0XHRcdHdoaWxlICghcmVzdWx0ICYmIGN1cnNvckhlYWQubGluZSA+PSBsaW5lX2xpbWl0KXtcclxuXHRcdFx0XHRsZXQgdG9rZW4xID0gY20uZ2V0VG9rZW5UeXBlQXQoY3Vyc29ySGVhZClcclxuXHRcdFx0XHRjdXJzb3JIZWFkLmxpbmUgLT0gMVxyXG5cdFx0XHRcdGxldCB0b2tlbjIgPSBjbS5nZXRUb2tlblR5cGVBdChjdXJzb3JIZWFkKVxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHRva2VuMSwgdG9rZW4yKTtcclxuXHRcdFx0XHRpZiAodG9rZW4xICE9PSB1bmRlZmluZWQgJiYgdG9rZW4yID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKGN1cnNvckhlYWQubGluZSA8IGxpbmVfbGltaXQpIHtcclxuXHRcdFx0XHRcdHJlc3VsdCA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChyZXN1bHQpIHtcclxuXHRcdFx0XHRjdXJzb3JIZWFkLmxpbmUgKz0gMVxyXG5cdFx0XHRcdGNtLnNldEN1cnNvcihjdXJzb3JIZWFkKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRuZXcgTm90aWNlKHBsdWdpbl9uYW1lICsgJzogbm90IGZvdW5kJyk7XHJcblx0XHRcdFx0Y3Vyc29ySGVhZC5saW5lID0gbGluZV9iYXNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBnb3RvU2libGluZyBpcyBjb25maWd1cmVkIG9ubHkgZm9yIFtuX2l0ZW0gPSArMSBvciAtMV1cclxuXHQvLyBpdCBtYXkgYmUgZXh0ZW5kZWQgbGF0ZXJcclxuXHRnb3RvU2libGluZyhuX2l0ZW06bnVtYmVyKXtcclxuXHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZi52aWV3O1xyXG5cdFx0aWYgKHZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcpIHtcclxuXHRcdFx0Y29uc3QgY20gPSB2aWV3LnNvdXJjZU1vZGUuY21FZGl0b3I7XHJcblx0XHRcdGxldCBsaW5lX2xpbWl0XHJcblx0XHRcdGlmIChuX2l0ZW0gPiAwKXtsaW5lX2xpbWl0ID0gY20ubGFzdExpbmUoKTt9IGVsc2Uge2xpbmVfbGltaXQgPSBjbS5maXJzdExpbmUoKTt9O1xyXG5cdFx0XHRsZXQgY3Vyc29ySGVhZCA9IGNtLmdldEN1cnNvcigpO1xyXG5cdFx0XHRsZXQgdmFyX3Rva2VuX2Jhc2UgPSBjbS5nZXRUb2tlblR5cGVBdChjdXJzb3JIZWFkKTtcclxuXHRcdFx0bGV0IGxpbmVfYmFzZSA9IGN1cnNvckhlYWQubGluZTtcclxuXHRcdFx0bGV0IHZhcl90b2tlblxyXG5cdFx0XHR3aGlsZSAodmFyX3Rva2VuICE9IHZhcl90b2tlbl9iYXNlXHJcblx0XHRcdFx0JiYgdGhpcy5nb3RvQ2hlY2tMaW1pdChjdXJzb3JIZWFkLmxpbmUsIG5faXRlbSwgbGluZV9saW1pdCkpIHtcclxuXHRcdFx0XHRjdXJzb3JIZWFkLmxpbmUgKz0gbl9pdGVtO1xyXG5cdFx0XHRcdHZhcl90b2tlbiA9IGNtLmdldFRva2VuVHlwZUF0KGN1cnNvckhlYWQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICh2YXJfdG9rZW4gPT0gdmFyX3Rva2VuX2Jhc2UpIHtcclxuXHRcdFx0XHRjbS5zZXRDdXJzb3IoY3Vyc29ySGVhZCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bmV3IE5vdGljZShwbHVnaW5fbmFtZSArICc6IG5vdCBmb3VuZCcpO1xyXG5cdFx0XHRcdGN1cnNvckhlYWQubGluZSA9IGxpbmVfYmFzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gZ290b0NoZWNrTGltaXQgaXMgY29uZmlndXJlZCBvbmx5IGZvciBbbl9pdGVtID0gKzEgb3IgLTFdXHJcblx0Ly8gaXQgbWF5IGJlIGV4dGVuZGVkIGxhdGVyXHJcblx0Z290b0NoZWNrTGltaXQoY3VycmVudF9saW5lOm51bWJlciwgbl9pdGVtOm51bWJlciwgbGluZV9saW1pdDpudW1iZXIpe1xyXG5cdFx0aWYgKG5faXRlbSA+IDAgJiYgY3VycmVudF9saW5lIDwgbGluZV9saW1pdCl7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSBlbHNlIGlmIChuX2l0ZW0gPCAwICYmIGN1cnJlbnRfbGluZSA+IGxpbmVfbGltaXQpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBnb3RvQ2hlY2tMaW1pdCBpcyBjb25maWd1cmVkIG9ubHkgZm9yIFtuX2l0ZW0gPSArMSBvciAtMV1cclxuXHQvLyBpdCBtYXkgYmUgZXh0ZW5kZWQgbGF0ZXJcclxuXHRnZXRMaW5lTGltaXQobl9pdGVtOm51bWJlcil7XHJcblx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYudmlldztcclxuXHRcdGxldCBsaW5lX2xpbWl0XHJcblx0XHRpZiAodmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xyXG5cdFx0XHRjb25zdCBjbSA9IHZpZXcuc291cmNlTW9kZS5jbUVkaXRvcjtcclxuXHRcdFx0aWYgKG5faXRlbSA+IDApIHtcclxuXHRcdFx0XHRsaW5lX2xpbWl0ID0gY20ubGFzdExpbmUoKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxpbmVfbGltaXQgPSBjbS5maXJzdExpbmUoKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbGluZV9saW1pdDtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coJ3VubG9hZGluZyBwbHVnaW4gWycgKyBwbHVnaW5fbmFtZSArICddJyk7XHJcblx0fVxyXG5cclxufSJdLCJuYW1lcyI6WyJQbHVnaW4iLCJNYXJrZG93blZpZXciLCJOb3RpY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF1REE7QUFDTyxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7QUFDN0QsSUFBSSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEgsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDL0QsUUFBUSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ25HLFFBQVEsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ3RHLFFBQVEsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFO0FBQ3RILFFBQVEsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxFQUFF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
